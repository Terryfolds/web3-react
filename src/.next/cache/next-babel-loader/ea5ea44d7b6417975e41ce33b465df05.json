{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Web3ReactProvider, useWeb3React, UnsupportedChainIdError } from '@web3-react/core';\nimport { NoEthereumProviderError, UserRejectedRequestError as UserRejectedRequestErrorInjected } from '@web3-react/injected-connector';\nimport { UserRejectedRequestError as UserRejectedRequestErrorWalletConnect } from '@web3-react/walletconnect-connector';\nimport { UserRejectedRequestError as UserRejectedRequestErrorFrame } from '@web3-react/frame-connector';\nimport { Web3Provider } from '@ethersproject/providers';\nimport { formatEther } from '@ethersproject/units';\nimport { useEagerConnect, useInactiveListener } from '../hooks';\nimport { injected } from '../connectors';\nimport { Spinner } from '../components/Spinner';\nvar ConnectorNames;\n\n(function (ConnectorNames) {\n  ConnectorNames[\"Injected\"] = \"Connect Wallet\";\n})(ConnectorNames || (ConnectorNames = {}));\n\nvar connectorsByName = _defineProperty({}, ConnectorNames.Injected, injected);\n\nfunction getErrorMessage(error) {\n  if (error instanceof NoEthereumProviderError) {\n    return 'No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.';\n  } else if (error instanceof UnsupportedChainIdError) {\n    return \"You're connected to an unsupported network.\";\n  } else if (error instanceof UserRejectedRequestErrorInjected || error instanceof UserRejectedRequestErrorWalletConnect || error instanceof UserRejectedRequestErrorFrame) {\n    return 'Please authorize this website to access your Ethereum account.';\n  } else {\n    console.error(error);\n    return 'An unknown error occurred. Check the console for more details.';\n  }\n}\n\nfunction getLibrary(provider) {\n  var library = new Web3Provider(provider);\n  library.pollingInterval = 12000;\n  return library;\n}\n\nexport default function () {\n  return __jsx(Web3ReactProvider, {\n    getLibrary: getLibrary\n  }, __jsx(App, null));\n}\n\nfunction Account() {\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account;\n\n  return __jsx(React.Fragment, null, __jsx(\"span\", null, \"Account\"), __jsx(\"span\", null, account === null ? '-' : account ? \"\".concat(account.substring(0, 6), \"...\").concat(account.substring(account.length - 4)) : ''));\n}\n\nfunction Balance() {\n  var _useWeb3React2 = useWeb3React(),\n      account = _useWeb3React2.account,\n      library = _useWeb3React2.library,\n      chainId = _useWeb3React2.chainId;\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      balance = _React$useState2[0],\n      setBalance = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (!!account && !!library) {\n      var stale = false;\n      library.getBalance(account).then(function (balance) {\n        if (!stale) {\n          setBalance(balance);\n        }\n      })[\"catch\"](function () {\n        if (!stale) {\n          setBalance(null);\n        }\n      });\n      return function () {\n        stale = true;\n        setBalance(undefined);\n      };\n    }\n  }, [account, library, chainId]); // ensures refresh if referential identity of library doesn't change across chainIds\n\n  return __jsx(React.Fragment, null, __jsx(\"span\", null, \"BNB Balance\"), __jsx(\"span\", null, balance === null ? 'Error' : balance ? \"\".concat(formatEther(balance).substring(0, 8)) : ''));\n}\n\nfunction Header() {\n  var _useWeb3React3 = useWeb3React(),\n      active = _useWeb3React3.active,\n      error = _useWeb3React3.error;\n\n  return __jsx(React.Fragment, null, __jsx(\"h3\", {\n    style: {\n      display: 'grid',\n      gridGap: '1rem',\n      gridTemplateColumns: '1fr 1fr',\n      maxWidth: '20rem',\n      lineHeight: '2rem',\n      margin: 'auto'\n    }\n  }, __jsx(Account, null), __jsx(Balance, null)));\n}\n\nfunction App() {\n  var context = useWeb3React();\n  var connector = context.connector,\n      library = context.library,\n      chainId = context.chainId,\n      account = context.account,\n      activate = context.activate,\n      deactivate = context.deactivate,\n      active = context.active,\n      error = context.error; // handle logic to recognize the connector currently being activated\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      activatingConnector = _React$useState4[0],\n      setActivatingConnector = _React$useState4[1];\n\n  React.useEffect(function () {\n    if (activatingConnector && activatingConnector === connector) {\n      setActivatingConnector(undefined);\n    }\n  }, [activatingConnector, connector]); // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n\n  var triedEager = useEagerConnect(); // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n\n  useInactiveListener(!triedEager || !!activatingConnector);\n  return __jsx(React.Fragment, null, __jsx(Header, null), __jsx(\"hr\", {\n    style: {\n      margin: '2rem'\n    }\n  }), __jsx(\"div\", {\n    style: {\n      display: 'grid',\n      gridGap: '1rem',\n      gridTemplateColumns: '1fr 1fr',\n      maxWidth: '30rem',\n      margin: 'auto'\n    }\n  }, Object.keys(connectorsByName).map(function (name) {\n    var currentConnector = connectorsByName[name];\n    var activating = currentConnector === activatingConnector;\n    var connected = currentConnector === connector;\n    var disabled = !triedEager || !!activatingConnector || connected || !!error;\n    return __jsx(\"button\", {\n      style: {\n        height: '3rem',\n        borderRadius: '1rem',\n        borderColor: activating ? 'orange' : connected ? 'green' : 'unset',\n        cursor: disabled ? 'unset' : 'pointer',\n        position: 'relative'\n      },\n      disabled: disabled,\n      key: name,\n      onClick: function onClick() {\n        setActivatingConnector(currentConnector);\n        activate(connectorsByName[name]);\n      }\n    }, __jsx(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '0',\n        left: '0',\n        height: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        color: 'black',\n        margin: '0 0 0 1rem'\n      }\n    }, activating && __jsx(Spinner, {\n      color: 'black',\n      style: {\n        height: '25%',\n        marginLeft: '-1rem'\n      }\n    })), name);\n  }), (active || error) && __jsx(\"button\", {\n    style: {\n      height: '3rem',\n      margin: '0 0 0 1rem',\n      borderRadius: '1rem',\n      borderColor: 'red',\n      cursor: 'pointer'\n    },\n    onClick: function onClick() {\n      deactivate();\n    }\n  }, \"Disconnect\"), !!error && __jsx(\"h4\", {\n    style: {\n      marginTop: '1rem',\n      marginBottom: '0'\n    }\n  }, getErrorMessage(error))), __jsx(\"hr\", {\n    style: {\n      margin: '2rem'\n    }\n  }), __jsx(\"div\", {\n    style: {\n      display: 'grid',\n      gridGap: '1rem',\n      gridTemplateColumns: 'fit-content',\n      maxWidth: '20rem',\n      margin: 'auto'\n    }\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}