{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { injected } from './connectors';\nexport function useEagerConnect() {\n  var _useWeb3React = useWeb3React(),\n      activate = _useWeb3React.activate,\n      active = _useWeb3React.active;\n\n  var _useState = useState(false),\n      tried = _useState[0],\n      setTried = _useState[1];\n\n  useEffect(function () {\n    injected.isAuthorized().then(function (isAuthorized) {\n      if (isAuthorized) {\n        activate(injected, undefined, true)[\"catch\"](function () {\n          setTried(true);\n        });\n      } else {\n        setTried(true);\n      }\n    });\n  }, []); // intentionally only running on mount (make sure it's only mounted once :))\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n\n  useEffect(function () {\n    if (!tried && active) {\n      setTried(true);\n    }\n  }, [tried, active]);\n  return tried;\n}\nexport function useInactiveListener() {\n  var suppress = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n  var _useWeb3React2 = useWeb3React(),\n      active = _useWeb3React2.active,\n      error = _useWeb3React2.error,\n      activate = _useWeb3React2.activate;\n\n  useEffect(function () {\n    var _ref = window,\n        ethereum = _ref.ethereum;\n\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      var handleConnect = function handleConnect() {\n        console.log(\"Handling 'connect' event\");\n        activate(injected);\n      };\n\n      var handleChainChanged = function handleChainChanged(chainId) {\n        console.log(\"Handling 'chainChanged' event with payload\", chainId);\n        activate(injected);\n      };\n\n      var handleAccountsChanged = function handleAccountsChanged(accounts) {\n        console.log(\"Handling 'accountsChanged' event with payload\", accounts);\n\n        if (accounts.length > 0) {\n          activate(injected);\n        }\n      };\n\n      var handleNetworkChanged = function handleNetworkChanged(networkId) {\n        console.log(\"Handling 'networkChanged' event with payload\", networkId);\n        activate(injected);\n      };\n\n      ethereum.on('connect', handleConnect);\n      ethereum.on('chainChanged', handleChainChanged);\n      ethereum.on('accountsChanged', handleAccountsChanged);\n      ethereum.on('networkChanged', handleNetworkChanged);\n      return function () {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('connect', handleConnect);\n          ethereum.removeListener('chainChanged', handleChainChanged);\n          ethereum.removeListener('accountsChanged', handleAccountsChanged);\n          ethereum.removeListener('networkChanged', handleNetworkChanged);\n        }\n      };\n    }\n  }, [active, error, suppress, activate]);\n}","map":null,"metadata":{},"sourceType":"module"}